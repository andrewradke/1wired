#! /bin/sh
### BEGIN INIT INFO
# Provides:          skeleton
# Required-Start:    $local_fs $remote_fs
# Required-Stop:     $local_fs $remote_fs
# Default-Start:     2 3 4 5
# Default-Stop:      S 0 1 6
# Short-Description: Example initscript
# Description:       This file should be used to construct scripts to be
#                    placed in /etc/init.d.
### END INIT INFO

# Author: Foo Bar <foobar@baz.org>
#
# Please remove the "Author" lines above and replace them
# with your own name if you copy and modify this script.

# Do NOT "set -e"

# PATH should only include /usr/* if it runs after the mountnfs.sh script
PATH=/usr/sbin:/usr/bin:/sbin:/bin
DESC="Description of the service"
NAME=onewired
USER=onewired
RUNDIR=/run/$NAME
DAEMON=/usr/local/sbin/onewired
DAEMON_ARGS=""
PIDFILE="$RUNDIR/$NAME.pid"
SCRIPTNAME=/etc/init.d/$NAME

# Exit if the package is not installed
[ -x "$DAEMON" ] || exit 0

# Read configuration variable file if it is present
[ -r /etc/default/$NAME ] && . /etc/default/$NAME

# Load the VERBOSE setting and other rcS variables
[ -f /etc/default/rcS ] && . /etc/default/rcS

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.0-6) to ensure that this file is present.
. /lib/lsb/init-functions

#
# Function that starts the daemon/service
#
do_start()
{
	# Return
	#   0 if daemon has been started
	#   1 if daemon was already running
	#   2 if daemon could not be started

	PIDOF=$(pidofproc -p $PIDFILE $DAEMON)
	if [ -n "$PIDOF" ] && [ -e "$PIDFILE" ] && [ "$PIDOF" = "$(cat $PIDFILE)" ] ; then
		log_action_msg "$NAME already running (pid: $PIDOF)"
		return 1
	fi
	install -d --mode=0755 -o $USER "$RUNDIR" || return 2
	start-stop-daemon --start --chuid $USER --pidfile $PIDFILE --exec $DAEMON -- $DAEMON_OPTS || return 2
}

#
# Function that stops the daemon/service
#
do_stop()
{
	# Return
	#   0 if daemon has been stopped
	#   1 if daemon was already stopped
	#   2 if daemon could not be stopped
	#   other if a failure occurred

	# can't use pidofproc from LSB here
	local AP_RET=0

	if pidof $DAEMON > /dev/null 2>&1 ; then
	        if [ -e $PIDFILE ] && pidof $DAEMON | tr ' ' '\n' | grep -w $(cat $PIDFILE) > /dev/null 2>&1 ; then
	                AP_RET=2
	        else
	                AP_RET=1
	        fi
	else
	    AP_RET=0
	fi

	# AP_RET is:
	# 0 if Apache (whichever) is not running
	# 1 if Apache (whichever) is running
	# 2 if Apache from the PIDFILE is running

	if [ $AP_RET = 0 ] ; then
	        return 1
	fi

	if [ $AP_RET = 2 ]; then
                killproc -p $PIDFILE $DAEMON
                onewired_wait_stop $?
                return $?
        elif [ $AP_RET = 1 ] ; then
                log_warning_msg "There are processes named 'onewired' running which do not match your pid file which are left untouched in the name of safety, Please review the situation by hand".
                return 2
        fi

}

#
# Function that sends a SIGHUP to the daemon/service
#
do_reload() {
	#start-stop-daemon --stop --signal 1 --quiet --pidfile $PIDFILE --name $NAME
	kill -HUP `cat $PIDFILE`
	return 0
}

onewired_wait_stop() {
	local STATUS=$1

	PIDTMP=$(pidofproc -p $PIDFILE $DAEMON)
	if [ -n "${PIDTMP:-}" ] && kill -0 "${PIDTMP:-}" 2> /dev/null; then
	        local i=0
	        while kill -0 "${PIDTMP:-}" 2> /dev/null;  do
	                if [ $i = '60' ]; then
	                        break
	                        STATUS=2
	                fi
	                [ "$VERBOSE" != no ] && log_progress_msg "."
	                sleep 1
	                i=$(($i+1))
	        done
	        return $STATUS
	else
	    return $STATUS
	fi
}

case "$1" in
  start)
	[ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
	do_start
	log_end_msg $?
	;;
  stop)
	[ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
	do_stop
	log_end_msg $?
	;;
  reload|force-reload)
	log_daemon_msg "Reloading $DESC" "$NAME"
	do_reload
	log_end_msg $?
	;;
  restart)
	log_daemon_msg "Restarting $DESC" "$NAME"
	do_stop
	case "$?" in
	  0|1)
		do_start
		case "$?" in
			0) log_end_msg 0 ;;
			1) log_end_msg 1 ;; # Old process is still running
			*) log_end_msg 1 ;; # Failed to start
		esac
		;;
	  *)
	  	# Failed to stop
		log_end_msg 1
		;;
	esac
	;;
  status)
	status_of_proc "$DAEMON" "$NAME" && exit 0 || exit $?
	;;
  *)
	echo "Usage: $SCRIPTNAME {start|stop|status|restart|reload|force-reload}" >&2
	exit 3
	;;
esac

:
